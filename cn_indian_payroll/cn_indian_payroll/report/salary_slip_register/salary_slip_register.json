{
 "add_total_row": 1,
 "columns": [],
 "creation": "2024-06-24 12:13:37.668628",
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [],
 "idx": 0,
 "is_standard": "Yes",
 "javascript": "\nfrappe.query_reports[\"Salary Slip Register\"] = {\n    \"filters\": [\n        {\n            \"label\": \"Employee ID\",\n            \"fieldname\": \"employee\",\n            \"fieldtype\": \"Link\",\n            \"options\": \"Employee\",\n            \"width\": 200\n        },\n        {\n            \"label\": \"Income Tax Slab\",\n            \"fieldname\": \"income_tax\",\n            \"fieldtype\": \"Link\",\n            \"options\": \"Income Tax Slab\",\n            \"width\": 200\n        },\n        \n         {\n            \"label\": \"From date\",\n            \"fieldname\": \"from_date\",\n            \"fieldtype\": \"Date\",\n            \n            \"width\": 200\n        },\n         {\n            \"label\": \"To Date\",\n            \"fieldname\": \"to_date\",\n            \"fieldtype\": \"Date\",\n            \n            \"width\": 200\n        },\n        \n        \n        \n    ]\n}\n",
 "letter_head": "Meril",
 "letterhead": null,
 "modified": "2024-06-26 09:39:46.531202",
 "modified_by": "Administrator",
 "module": "cn-indian-payroll",
 "name": "Salary Slip Register",
 "owner": "Administrator",
 "prepared_report": 0,
 "ref_doctype": "Salary Slip",
 "report_name": "Salary Slip Register",
 "report_script": "\ncolumns = [\n    \n    {\"fieldname\": \"ss_id\", \"label\": \"Salary Slip ID\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n    \n    \n    {\"fieldname\": \"employee\", \"label\": \"Employee ID\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"employee_name\", \"label\": \"Employee Name\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"income_tax_slab\", \"label\": \"Income Tax Slab\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n    {\"fieldname\": \"working_days\", \"label\": \"Working Days\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"payment_days\", \"label\": \"Payment Days\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"LOP\", \"label\": \"LOP\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n     {\"fieldname\": \"start_date\", \"label\": \"Start Date\", \"fieldtype\": \"Date\", \"width\": 150},\n      {\"fieldname\": \"end_date\", \"label\": \"End Date\", \"fieldtype\": \"Date\", \"width\": 150},\n    \n    \n    {\"fieldname\": \"basic\", \"label\": \"Basic\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"hra\", \"label\": \"HRA\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"twa_dfi\", \"label\": \"TWA DFI\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"uniform_allowance\", \"label\": \"Uniform Allowance\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"medical_allowance\", \"label\": \"Medical Allowance\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"food_coupon\", \"label\": \"Food Coupon\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"heema\", \"label\": \"HEEMA\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"bonus\", \"label\": \"Bonus\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"bonus_accrual\", \"label\": \"Bonus Accrual\", \"fieldtype\": \"Currency\", \"width\": 100},\n    \n    {\"fieldname\": \"petrol_reimbursement\", \"label\": \"Petrol Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"vehicle_maintenance_reimbursement\", \"label\": \"Vehicle Maintenance Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 250},\n    {\"fieldname\": \"driver_salary_reimbursement\", \"label\": \"Driver Salary Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"leave_travel_allowance\", \"label\": \"Leave Travel Allowance\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    \n    {\"fieldname\": \"car_perquisite\", \"label\": \"Car Perquisite\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"driver_perquisite\", \"label\": \"Driver Perquisite\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    \n    {\"fieldname\": \"employee_provident_fund\", \"label\": \"Employee Provident Fund\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"nps\", \"label\": \"NPS\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"esic\", \"label\": \"ESIC\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"bonus_deduction\", \"label\": \"Bonus Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n   \n\n    {\"fieldname\": \"pt_g\", \"label\": \"Professional Tax (Gujarat)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_m\", \"label\": \"Professional Tax (Maharashtra)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_an\", \"label\": \"Professional Tax (Andrapradesh)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_w\", \"label\": \"Professional Tax (West Bengal)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_kar\", \"label\": \"Professional Tax (Karnataka)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    \n    {\"fieldname\": \"income_tax\", \"label\": \"Income Tax\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"gross_pay\", \"label\": \"Gross Pay\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"net_pay\", \"label\": \"Net Pay\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"total_deduction\", \"label\": \"Total Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n    \n    \n    \n     \n    \n    \n    \n]\n\n\n\n\n\n\n\n\n\n\n\ndef get_salary_slips(filters=None):\n    if filters is None:\n        filters = {}\n\n    conditions = {}\n    if filters.get(\"employee\"):\n        conditions[\"employee\"] = filters[\"employee\"]\n        \n    if filters.get(\"from_date\"):\n        conditions[\"start_date\"] = (\">=\", filters[\"from_date\"])\n        \n    if filters.get(\"to_date\"):\n        conditions[\"end_date\"] = (\"<=\", filters[\"to_date\"])\n        \n    if filters.get(\"income_tax\"):\n        conditions[\"custom_income_tax_slab\"] = filters[\"income_tax\"]\n        \n        \n        \n        \n    data = frappe.get_list(\n        'Salary Slip',\n        fields=[\"*\"],\n        filters=conditions,\n        order_by=\"name DESC\"\n    )\n   \n    return data\n    \nss_id=[]   \ntotal_working_days=[]\npayment_days=[]\nleave_without_pay=[]\nemployee = []\nemployee_name = []\nbasic = []\nhra = []\ntwa = []  \nuniform = []\nmedical = []\nfood_coupon = []\nheema = []\n\nfuel = []  \ndriver = [] \nvehicle=[]\nlta = []  \n\nepf=[]\nnps=[]\nesic=[]\n\npt_g=[]\npt_m=[]\npt_an=[]\npt_w=[]\npt_kar=[]\nincome_tax_slab=[]\n\ntotal_deduction=[]\nnet_pay=[]\ngross_pay=[]\nincome_tax=[]\n\ncar_perquisite=[]\ndriver_perquisite=[]\nstart_date=[]\nend_date=[]\n\nbonus_deduction=[]\nbonus=[]\nbonus_accrual=[]\n\ndata=[]\n\nlead_data = get_salary_slips(filters)\n\nfor slip in lead_data:\n    doc = frappe.get_doc('Salary Slip', slip.name)\n    employee.append(doc.employee)\n    employee_name.append(doc.employee_name)\n    total_deduction.append(doc.total_deduction)\n    net_pay.append(doc.net_pay)\n    \n    ss_id.append(doc.name) \n    total_working_days.append(doc.total_working_days) \n    payment_days.append(doc.payment_days) \n    leave_without_pay.append(doc.leave_without_pay) \n    gross_pay.append(doc.custom_statutory_grosspay)\n    \n    income_tax_slab.append(doc.custom_income_tax_slab)\n   \n    start_date.append(doc.start_date)\n    end_date.append(doc.end_date)\n    \n    for earning in doc.earnings:\n        if earning.salary_component == \"Basic\":\n            basic.append(earning.amount)\n        if earning.salary_component == \"House Rent Allowance\":\n            hra.append(earning.amount)\n        if earning.salary_component == \"TWA-DFI\":  \n            twa.append(earning.amount)\n        \n        if earning.salary_component == \"Uniform\":\n            uniform.append(earning.amount)\n        if earning.salary_component == \"Medical\":\n            medical.append(earning.amount)\n        if earning.salary_component == \"Food Coupon\":\n            food_coupon.append(earning.amount)\n        if earning.salary_component == \"HEEMA\":\n            heema.append(earning.amount)\n        if earning.salary_component == \"Petrol Reimbursement\":\n            fuel.append(earning.amount)\n        if earning.salary_component == \"Vehicle Maintenance Reimbursement\":\n            vehicle.append(earning.amount)\n        if earning.salary_component == \"Driver Salary Reimbursement\":\n            driver.append(earning.amount)\n        if earning.salary_component == \"Leave Travel Allowance\":\n            lta.append(earning.amount)\n        if earning.salary_component == \"Car Perquisite\":\n            car_perquisite.append(earning.amount)\n        if earning.salary_component == \"Driver Perquisite\":\n            driver_perquisite.append(earning.amount)\n            \n        if earning.salary_component==\"Bonus\":\n            bonus.append(earning.amount)\n            \n        if earning.salary_component ==\"Bonus (Accrual)\":\n            bonus_accrual.append(earning.amount)    \n            \n    for deduction in doc.deductions:\n        if deduction.salary_component == \"Employee Provident Fund\":\n            epf.append(deduction.amount)\n        if deduction.salary_component == \"NPS\":\n            nps.append(deduction.amount)\n        if deduction.salary_component == \"ESIC\":\n            esic.append(deduction.amount)\n        if deduction.salary_component == \"Professional Tax (Gujarat)\":\n            pt_g.append(deduction.amount)\n        if deduction.salary_component == \"Income Tax\":\n            income_tax.append(deduction.amount)\n            \n        if deduction.salary_component==\"Bonus Deduction\":\n            \n            bonus_deduction.append(deduction.amount)\n            \n        if deduction.salary_component==\"Professional Tax (Maharashtra)\":\n            pt_m.append(deduction.amount)\n            \n        if deduction.salary_component==\"Professional Tax (Andra Pradesh)\":\n            pt_an.append(deduction.amount)\n        \n        \n        if deduction.salary_component==\"Professional Tax ( West Bengal)\":\n            pt_w.append(deduction.amount)\n        \n        \n        if deduction.salary_component==\"Professional Tax (Karnata)\":\n            pt_kar.append(deduction.amount)\n   \n            \n            \n\n   \n\nmax_length = max(len(employee), len(employee_name), len(basic), len(hra), len(twa),\n                 len(uniform), len(medical), len(food_coupon), len(heema))\n\nemployee.extend([''] * (max_length - len(employee)))\nemployee_name.extend([''] * (max_length - len(employee_name)))\nbasic.extend([0] * (max_length - len(basic)))\nhra.extend([0] * (max_length - len(hra)))\ntwa.extend([0] * (max_length - len(twa)))\nuniform.extend([0] * (max_length - len(uniform)))\nmedical.extend([0] * (max_length - len(medical)))\nfood_coupon.extend([0] * (max_length - len(food_coupon)))\nheema.extend([0] * (max_length - len(heema)))  \nfuel.extend([0] * (max_length - len(fuel)))  \nvehicle.extend([0] * (max_length - len(vehicle)))  \ndriver.extend([0] * (max_length - len(driver)))  \nlta.extend([0] * (max_length - len(lta))) \nnps.extend([0] * (max_length - len(nps)))  \nesic.extend([0] * (max_length - len(esic)))  \npt_g.extend([0] * (max_length - len(pt_g)))  \nincome_tax.extend([0] * (max_length - len(income_tax))) \nepf.extend([0] * (max_length - len(epf)))\ncar_perquisite.extend([0] * (max_length - len(car_perquisite)))\ndriver_perquisite.extend([0] * (max_length - len(driver_perquisite)))\nbonus_deduction.extend([0] * (max_length - len(bonus_deduction)))\nbonus.extend([0] * (max_length - len(bonus)))\nbonus_accrual.extend([0] * (max_length - len(bonus_accrual)))\npt_m.extend([0] * (max_length - len(pt_m)))\npt_an.extend([0] * (max_length - len(pt_an)))\npt_w.extend([0] * (max_length - len(pt_w)))\npt_kar.extend([0] * (max_length - len(pt_kar)))\n\n\n\n            \n            \n   \n\nfor k in range(len(employee)):\n    data.append([ss_id[k],employee[k], employee_name[k],income_tax_slab[k],total_working_days[k],payment_days[k],leave_without_pay[k],start_date[k],end_date[k], basic[k],hra[k],twa[k],uniform[k],medical[k],food_coupon[k],heema[k],bonus[k],bonus_accrual[k],fuel[k],vehicle[k],driver[k],lta[k],car_perquisite[k],driver_perquisite[k],epf[k],nps[k],esic[k],bonus_deduction[k],pt_g[k],pt_m[k],pt_an[k],pt_w[k],pt_kar[k],income_tax[k],gross_pay[k],net_pay[k],total_deduction[k]])\n\ndef execute(filters=None):\n    return columns, data\n    \n\ndata=columns,data,None,None,None\n    \n\n",
 "report_type": "Script Report",
 "roles": [
  {
   "role": "HR User"
  },
  {
   "role": "HR Manager"
  },
  {
   "role": "Employee"
  },
  {
   "role": "Employee Self Service"
  }
 ]
}
